{
    "Custom": {
        "description": "Generates anything based on customized input and instruction.",
        "interface": "custom(input: str, instruction: str) -> dict with key 'response' of type str"
    },
    "ScEnsemble": {
        "description": "Uses self-consistency to select the solution that appears most frequently in the solution list, improve the selection to enhance the choice of the best solution.",
        "interface": "sc_ensemble(solutions: List[str]) -> dict with key 'response' of type str"
    },
    "AnswerGenerate": {
        "description": "Generate step by step based on the input. The step by step thought process is in the field of 'thought', and the final answer is in the field of 'answer'.",
        "interface": "answer_generate(input: str) -> dict with key 'thought' of type str, 'answer' of type str"
    },
    "HistoricalFactExtractor": {
        "description": "Extracts key historical facts from the input and categorizes them by topic.",
        "interface": "historical_fact_extractor(input: str) -> dict with key 'facts' of type Dict[str, List[str]]"
    },
    "AlternateScenarioGenerator": {
        "description": "Generates a plausible alternate historical scenario based on provided historical facts.",
        "interface": "alternate_scenario_generator(facts: Dict[str, List[str]]) -> dict with key 'alternate_scenario' of type str"
    },
    "PlausibilityChecker": {
        "description": "Evaluates the plausibility of an alternate historical scenario and provides a score with reasoning.",
        "interface": "plausibility_checker(scenario: str) -> dict with keys 'plausibility_score' of type float, 'reasoning' of type str"
    },
    "NarrativeCoherenceEnhancer": {
        "description": "Enhances the narrative coherence of an alternate historical scenario and lists the changes made.",
        "interface": "narrative_coherence_enhancer(scenario: str) -> dict with keys 'enhanced_scenario' of type str, 'changes_made' of type List[str]"
    },
    "HistoricalAccuracyVerifier": {
        "description": "Verifies the historical accuracy of an alternate scenario against original facts, providing a score, list of inaccuracies, and suggestions for improvement.",
        "interface": "historical_accuracy_verifier(scenario: str, original_facts: Dict[str, List[str]]) -> dict with keys 'accuracy_score' of type float, 'inaccuracies' of type List[str], 'suggestions' of type List[str]"
    }
}